pipeline {

    agent any

    environment {
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "192.168.10.193:8091"
        // Repository where we will upload the artifact
        NEXUS_RELEASE_REPOSITORY = "looyas-project-repo-rel"
        NEXUS_SNAPSHOT_REPOSITORY = "looyas-project-repo-snap"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master'], [name: '*/test_unitaire_intgeration']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/Looyas-Team/user_managemant_firstinstance.git']]])
            }
        }
        stage('Build') {
            steps {
                withMaven(jdk: 'localJDK', maven: 'localMaven') {
                    sh 'mvn clean package -Dunit-tests.skip=true'
                }
            }
        }
        stage('code review') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';

                    withSonarQubeEnv('sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
        stage("Unit Tests") {
            steps {
                withMaven(jdk: 'localJDK', maven: 'localMaven') {
                    sh "mvn test"
                }
            }
        }
        stage('Integration tests') {
            // Run integration test
            steps {
                script {
                    withMaven(jdk: 'localJDK', maven: 'localMaven') {
                        if (isUnix()) {
                            // just to trigger the integration test without unit testing
                            sh "mvn  verify -Dunit-tests.skip=true"
                        }
                        else {
                            bat(/mvn verify -Dunit-tests.skip=true/)
                        }
                    }
                }
            }
        }
        stage('Kill old process'){
                    steps {
                        script {
                            sh '''
                 #!/bin/bash
                 lsof -t -i :8888 | xargs --no-run-if-empty kill -9
                 '''
                        }
                    }
                }
               
          stage("publish to nexus") {
                    steps {
                        script {
                            // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                            pom = readMavenPom file: "pom.xml";
                            // Find built artifact under target folder
                            filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                            // Print some info from the artifact found
                            echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                            // Extract the path from the File found
                            artifactPath = filesByGlob[0].path;
                            // Assign to a boolean response verifying If the artifact name exists
                            artifactExists = fileExists artifactPath;
                            if(artifactExists) {
                                if (pom.version.toUpperCase().contains('SNAPSHOT')){
                                    echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                                    nexusArtifactUploader(
                                            nexusVersion: NEXUS_VERSION,
                                            protocol: NEXUS_PROTOCOL,
                                            nexusUrl: NEXUS_URL,
                                            groupId: pom.groupId,
                                            version: pom.version,
                                            repository: NEXUS_SNAPSHOT_REPOSITORY,
                                            credentialsId: NEXUS_CREDENTIAL_ID,
                                            artifacts: [
                                                    // Artifact generated such as .jar, .ear and .war files.
                                                    [artifactId: pom.artifactId,
                                                     classifier: '',
                                                     file: artifactPath,
                                                     type: pom.packaging],
                                                    // Lets upload the pom.xml file for additional information for Transitive dependencies
                                                    [artifactId: pom.artifactId,
                                                     classifier: '',
                                                     file: "pom.xml",
                                                     type: "pom"]
                                            ]
                                    );
                                }

                                else{
                                    echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                                    nexusArtifactUploader(
                                            nexusVersion: NEXUS_VERSION,
                                            protocol: NEXUS_PROTOCOL,
                                            nexusUrl: NEXUS_URL,
                                            groupId: pom.groupId,
                                            version: pom.version,
                                            repository:NEXUS_RELEASE_REPOSITORY,
                                            credentialsId: NEXUS_CREDENTIAL_ID,
                                            artifacts: [
                                                    // Artifact generated such as .jar, .ear and .war files.
                                                    [artifactId: pom.artifactId,
                                                     classifier: '',
                                                     file: artifactPath,
                                                     type: pom.packaging],
                                                    // Lets upload the pom.xml file for additional information for Transitive dependencies
                                                    [artifactId: pom.artifactId,
                                                     classifier: '',
                                                     file: "pom.xml",
                                                     type: "pom"]
                                            ]
                                    );
                                }
                            }
                            else {
                                error "*** File: ${artifactPath}, could not be found";
                            }
                        }
                    }
                } 
        stage('Deploy stage') {

            steps {
                script {

                    withEnv(['JENKINS_NODE_COOKIE=dontkillme']) {

                        sh "nohup  java -jar  target/demo-0.0.1-SNAPSHOT.jar &"
                    }
                    sh "sleep 20"
                }
            }
        }
        
    }
    post {
        always {
             
         emailext( to: 'adam.issaoui@looyas.com',
             subject: "Jenkins : Failed Pipeline: ${currentBuild.fullDisplayName}",
             body: '''${SCRIPT, template="managed:Groovy-Email-Template"}''' )
    
        }
    }
}
       


